var isScalar = function (x) {
  return x === null || ['number','string','boolean'].indexOf(typeof(x)) != -1;
};

var analyse = function (x) {
  var type = typeof(x);
  if (type == 'object') {
    if (x === null) {
      return 'null';
    } else if (x instanceof Array) {
      return x.every(isScalar) ? '[scalar]' : '[]';
    } else if (x instanceof RegExp) {
      return '~';
    } else {
      return '{}';
    }
  } else {
    return type;
  }
};

var IS_NULL = function (x) { return x === null; };
var TRUE = function (x) { return true; };
var FALSE = function (x) { return false; };

var Engine = function () {
  this.directives = {};
};

Engine.prototype.directive = function (name, directive) {
  this.directives[name] = directive;
};

Engine.prototype.compile = function compile(model) {
  switch (analyse(model)) {
    case 'number':
    case 'string':
    case 'boolean': {
      return function (x) { return x == model; };
    }
    case 'null': {
      return IS_NULL;
    }
    case '[scalar]': {
      return function (x) { return model.indexOf(x) != -1; };
    }
    case '[]': {
      var specs = model.map(compile, this);
      switch (specs.length) {
        case 0: return FALSE;
        case 1: return specs[0];
        default: return function (x) {
          return specs.some(function (f) { return f(x) === true; });
        };
      }
    }
    case '{}': {
      var specs = Object.getOwnPropertyNames(model).map(function (k) {
        var v = model[k];
        if (k[0] == '$') {
          var name = k.slice(1);
          var directive = this.directives[name];
          if (directive === undefined) {
            throw new Error('directive ' + name + ' not found');
          } else {
            return directive(v, compile.bind(this), analyse);
          }
        } else {
          var spec = this.compile(v);
          return function (x) { return x !== undefined && spec(x[k]); };
        }
      }.bind(this));
      switch (specs.length) {
        case 0: return TRUE;
        case 1: return specs[0];
        default: return function (x) {
          return specs.every(function (f) { return f(x) === true; });
        };
      }
    }
    case '~': {
      return function (x) { return model.test(x); }
    }
  }
};

module.exports.engine = function () {
  var engine = new Engine();
  Array.prototype.slice.call(arguments).map(function (module) {
    switch (typeof(module)) {
      case 'string': return require('specs-' + module);
      case 'function': return module;
      default: throw new Error('unsupported module type');
    }
  }).forEach(function (module) {
    module(engine);
  });
  return engine;
};

